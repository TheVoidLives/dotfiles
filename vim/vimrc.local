set nocursorline " don't highlight current line

" Added - Indenting
filetype indent on
set smartindent

" Added - Auto Source .vimrc
autocmd! bufwritepost .vimrc source ~/.vimrc


set splitbelow                                  " Split split below
set splitright                                  " Split right

" keyboard shortcuts
let mapleader = ","
 " Split navigation!
nnoremap <C-J> <C-W><C-J>              
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Note: CoC settings found in 
" vim:    ~/.vim/coc-settings.json
" neovim: ~/.config/nvim/coc-settings.json

" ????
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>

" Tab navigation
nnoremap <leader>h :tabfirst<CR>
nnoremap <leader>j :tabprev<CR>
nnoremap <leader>k :tabnext<CR>
nnoremap <leader>l :tablast<CR>

" fzf
" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

nnoremap <leader>f :FZF<CR>


" NERTree 
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>F :NERDTreeFind<CR>

" Easy Align | Visual,Normal
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)


"Version Control
nnoremap <leader>g :GitGutterToggle<CR>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
inoremap jj <ESC>

" Goyo :
nnoremap <leader>L :Limelight!!<CR>
nnoremap <leader>G :Goyo<CR>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
      colorscheme gruvbox
  else
    colorscheme desert
  endif
endif

" 
" Plugin Settings
"
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0

" Ale completion | Java
let g:ale_java_javac_classpath = '.:$HOME/School/UCF/Spring 2019/CAP 4630/lib/PacSimLib.jar'

" Markdown browser
let g:mkdp_browser = '/Applications/Google Chrome.app'

" Python 3
let g:pymode_python = 'python3'

"" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Added - Omnisharp
let g:OmniSharp_server_use_mono = 1

" FZF plugin settings
"
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'


